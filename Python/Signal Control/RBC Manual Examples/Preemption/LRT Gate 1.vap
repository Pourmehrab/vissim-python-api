PROGRAM xGateCrossing; /* Heavy-Rail Gate Crossing using continuous presence for checkin/checkout*/

/********* Signal Control Settings in VISSIM **********/

/*		Min Green	5
		Min Red		5
		Red/Amber	2
		Amber		4   "BellRingTime below"
		Red Clear	1    */

CONST
/*************************************************************************************/
/*************************************************************************************/
/*************************************************************************************/
/*************************************************************************************/
/*************************************************************************************/

		TrainDetectorIn1		=	211,  /* long detector extending from point of RR2 start through the intersection*/
		TrainDetectorIn2		=	611,
		GateSignalHead1			=	202,  /* signal head number placed on road, represents the gates*/
		GateSignalHead2			=	206,
		TrainSignalHead1		=	204,     /* signal head number placed on tracks*/
		TrainSignalHead2		=	208,
		BellRingTime			=	4,       /* starts at detection, preceeds gate down - 4 seconds in OR */
		GateMoveTime			=	6,       /* time for gates to come down - 6 seconds in OR */
		TrainClearTime			=	10,      /* time after gates come down before train arrives */
		/* The Sum of BellRingTime + GateMoveTime + TrainClearTime >= 20 seconds (MUTCD) */
		TrainSignalEarlyGreen1	=	0,    /* Use if signalhead is placed at a station (close to intersection) instead of at intersection */
		TrainSignalEarlyGreen2	=	0,
/*************************************************************************************/
/*************************************************************************************/
/*************************************************************************************/
/*************************************************************************************/
/*************************************************************************************/


OFFC 	= 0,
INITIAL = 1,
CHECKIN = 2,
TIMEOUT = 3,
YELLOW	= 4,
RDCLEAR = 5;
/**** ARRAY VARIABLES *************/
ARRAY
		TA[4]			=	[0,0,0,0],      /* Amber time */
		RC[4] 			=	[0,0,0,0];   /* Red Clearance time */
SUBROUTINE Compute_Expressions;
/* DEFINE GREEN AND MIN TIMES BASED ON EXISTING SIGNAL HEADS*/

NVP1 := 1;
NVP2 := 2;
NTP1 := 3;
NTP2 := 4;
VP1 := GateSignalHead1;
VP2 := GateSignalHead2;
TP1 := TrainSignalHead1;
TP2 := TrainSignalHead2;

IF VP1 THEN
	TgreenV1 := t_green(VP1);
	TredV1 := t_red(VP1);
	tgreenmin2 := t_green_min(VP1);
ELSE
	TgreenV1 := 0;
	TredV1 := 0;
END;
IF TP1 THEN
	TgreenT1 := t_green(TP1);
	TredT1 := t_red(TP1);
	tgreenmin4 := t_green_min(TP1);
ELSE
	TgreenT1 := 0;
	TredT1 := 0;
END;
IF VP2 THEN
	TgreenV2 := t_green(VP2);
	TredV2 := t_red(VP2);
	tgreenmin6 := t_green_min(VP2);
ELSE
	TgreenV2 := 0;
	TredV2 := 0;
END;
IF TP2 THEN
	TgreenT2 := t_green(TP2);
	TredT2 := t_red(TP2);
	tgreenmin8 := t_green_min(TP2);
ELSE
	TgreenT2 := 0;
	TredT2 := 0;
END;

/*************************************************************/
/*** AmberTimes and Red Clearance, etc. **********************/
/*************************************************************/

TA[1] := BellRingTime;
TA[2] := BellRingTime;
TA[3] := 0;
TA[4] := 0;
RC[1] := TrainClearTime + GateMoveTime - TrainSignalEarlyGreen1;
RC[2] := TrainClearTime + GateMoveTime - TrainSignalEarlyGreen2;
RC[3] := 1;
RC[4] := 1;
/*************************************************************/
/*** MinOver ************************************************/
/*************************************************************/
IF VP1 THEN 
	MinOver2 := TgreenV1 >= tgreenmin2;
ELSE 
	MinOver2 := 1;
END;
IF TP1 THEN 
	MinOver4 := TgreenT1 >= tgreenmin4;
ELSE 
	MinOver4 := 1;
END;
IF VP2 THEN 
	MinOver6 := TgreenV2 >= tgreenmin6;
ELSE 
	MinOver6 := 1;
END;
IF TP2 THEN 
	MinOver8 := TgreenT2 >= tgreenmin8;
ELSE 
	MinOver8 := 1;
END;

/*************************************************************/
/*** Detector Functionality **********************************/
/*************************************************************/

IF presence (TrainDetectorIn1) OR occupancy(TrainDetectorIn1) THEN
	Call4 := 1;
ELSE
	Call4 := 0;
END;

IF presence (TrainDetectorIn2) OR occupancy(TrainDetectorIn2) THEN
	Call8 := 1;
ELSE
	Call8 := 0;
END;

Call1256 := 1;
Call2 := 1;
Call6 := 1;
Call3478 := Call4 OR Call8.


SUBROUTINE CHECK3478;

IF TP1 AND Call4 THEN
	NextPhase1 := 4;
ELSE
	NextPhase1 := 0;
END.

SUBROUTINE CHECK1256;

IF VP1 AND Call2 THEN
	NextPhase1 := 2;
ELSE
	NextPhase1 := 0;
END.

SUBROUTINE CHECK7834;

IF TP2 AND Call8 THEN
	NextPhase2 := 8;
ELSE
	NextPhase2 := 0;
END.

SUBROUTINE CHECK5612;

IF VP2 AND Call6 THEN
	NextPhase2 := 6;
ELSE
	NextPhase2 := 0;
END.

SUBROUTINE Compute_All;

R1AP := 0;
R1C  := 0;
R2AP := 0;
R2C  := 0;

/*************************************************************/
/*** Phase Conditions ****************************************/
/*************************************************************/
IF TgreenV1 THEN
	R1AP := 2;
	IF NOT MinOver2 THEN
		R1C := INITIAL;
	ELSE
			R1C := TIMEOUT;
	END;
ELSE
	IF VehClearTimer2>TA[NVP1] THEN
		R1AP := 2;
		R1C := RDCLEAR;
	ELSE
		IF VehClearTimer2 THEN
			R1AP := 2;
			R1C := YELLOW;
		END;
	END;
	IF TgreenT1 THEN
		R1AP := 4;
		IF NOT MinOver4 THEN
			R1C := INITIAL;
		ELSE
			IF NOT Call4 THEN
				R1C := TIMEOUT;
			ELSE
				R1C := CHECKIN;
			END;
		END;
	ELSE
		IF VehClearTimer4>TA[NTP1] THEN
			R1AP := 4;
			R1C := RDCLEAR;
		ELSE
			IF VehClearTimer4 THEN
				R1AP := 4;
				R1C := YELLOW;
			END;
		END;
	END;
END;
IF TgreenV2 THEN
	R2AP := 6;
	IF NOT MinOver6 THEN
		R2C := INITIAL;
	ELSE
			R2C := TIMEOUT;
	END;
ELSE
	IF VehClearTimer6>TA[NVP2] THEN
		R2AP := 6;
		R2C := RDCLEAR;
	ELSE
		IF VehClearTimer6 THEN
			R2AP := 6;
			R2C := YELLOW;
		END;
	END;
	IF TgreenT2 THEN
		R2AP := 8;
		IF NOT MinOver8 THEN
			R2C := INITIAL;
		ELSE
			IF NOT Call8 THEN
				R2C := TIMEOUT;
			ELSE
				R2C := CHECKIN;
			END;
		END;
	ELSE
		IF VehClearTimer8>TA[NTP2] THEN
			R2AP := 8;
			R2C := RDCLEAR;
		ELSE
			IF VehClearTimer8 THEN
				R2AP := 8;
				R2C := YELLOW;
			END;
		END;
	END;
END;
IF (R1AP=2) THEN
	IF R1C=TIMEOUT THEN
		IF CALL3478 THEN
			IF (((R2AP=6) AND (R2C=TIMEOUT)) OR (R2C=OFFC)) THEN
				sg_red(VP1);
				
				Gate_record := 1;
				
				TgreenV1:=0;
				start(VehClearTimer2);
				GOSUB CHECK3478;
			END;
		END;
	END;
ELSE
	IF (R1AP=4) THEN
		IF R1C=TIMEOUT THEN
			IF CALL1256 THEN
				IF (((R2AP=8) AND (R2C=TIMEOUT)) OR (R2C=OFFC)) THEN
					sg_red(TP1);
					
					Gate_record := 0;
					
					TgreenT1:=0;
					start(VehClearTimer4);
					GOSUB CHECK1256;
				END;
			END;
		END;
	END;
END;

IF (R2AP=6) THEN
	IF R2C=TIMEOUT THEN
		IF CALL3478 THEN
			IF (((R1AP=2) AND (R1C=TIMEOUT)) OR (R1C=OFFC)) THEN
				sg_red(VP2);
				
				Gate_record := 1;
				
				TgreenV2:=0;
				start(VehClearTimer6);
				GOSUB CHECK7834;
			END;
		END;
	END;
ELSE
	IF (R2AP=8) THEN
		IF R2C=TIMEOUT THEN
			IF CALL1256 THEN
				IF (((R1AP=4) AND (R1C=TIMEOUT)) OR (R1C=OFFC)) THEN
					sg_red(TP2);
					
					Gate_record := 0;
					
					TgreenT2:=0;
					start(VehClearTimer8);
					GOSUB CHECK5612;
				END;
			END;
		END;
	END;
END;


IF VP1 THEN
	IF (VehClearTimer2 = TA[NVP1] + RC[NVP1]) THEN
		stop(VehClearTimer2);
		reset(VehClearTimer2);
		IF NextPhase1 = 4 THEN 
			sg_green(TP1);
			TgreenT1:=1;
			R1AP := 4;
			R1C := INITIAL;
		ELSE
			R1AP := 0;
			R1C := 0;
		END;
	END;
END;

IF TP1 THEN
	IF (VehClearTimer4 = TA[NTP1] + RC[NTP1]) THEN
		stop(VehClearTimer4);
		reset(VehClearTimer4);
		IF NextPhase1 = 2 THEN 
			sg_green(VP1);
			TgreenV1:=1;
			R1AP := 2;
			R1C := INITIAL;
		ELSE
			R1AP := 0;
			R1C := 0;
		END;
	END;
END;

IF VP2 THEN
	IF (VehClearTimer6 = TA[NVP2] + RC[NVP2]) THEN
		stop(VehClearTimer6);
		reset(VehClearTimer6);
		IF NextPhase2 = 8 THEN 
			sg_green(TP2);
			TgreenT2:=1;
			R2AP := 8;
			R2C := INITIAL;
		ELSE
			R2AP := 0;
			R2C := 0;
		END;
	END;
END;

IF TP2 THEN
	IF (VehClearTimer8 = TA[NTP2] + RC[NTP2]) THEN
		stop(VehClearTimer8);
		reset(VehClearTimer8);
		IF NextPhase2 = 6 THEN 
			sg_green(VP2);
			TgreenV2:=1;
			R2AP := 6;
			R2C := INITIAL;
		ELSE
			R2AP := 0;
			R2C := 0;
		END;
	END;
END;

IF (R1AP=0) THEN
	IF ((R2AP=6) AND NOT (NOT TredV2 AND NOT TgreenV2)) THEN
		IF Call1256 THEN
			IF Call2 AND (TredV2>(GateMoveTime+TrainClearTime)) THEN
				sg_green(VP1);
				TgreenV1:=1;
			END;
		END;
	ELSE
		IF ((R2AP=8) AND NOT (NOT TredT2 AND NOT TgreenT2)) THEN
			IF Call3478 THEN
				IF Call4 THEN
					sg_green(TP1);
					TgreenT1:=1;
				END;
			END;
		END;
	END;
ELSE
	IF (R2AP=0) THEN
		IF ((R1AP=2) AND NOT (NOT TredV1 AND NOT TgreenV1)) THEN
			IF Call1256 THEN
				IF Call6 AND (TredV1>(GateMoveTime+TrainClearTime)) THEN
					sg_green(VP2);
					TgreenV2:=1;
				END;
			END;
		ELSE
			IF ((R1AP=4) AND NOT (NOT TredT1 AND NOT TgreenT1)) THEN
				IF Call3478 THEN
					IF Call8 THEN
						sg_green(TP2);
						TgreenT2:=1;
					END;
				END;
			END;
		END;
	END;
END.

/* Main Program */

GOSUB Compute_Expressions;
GOSUB Compute_All;
Record_value(100,Gate_record);
Marker_Put(1,Gate_record).