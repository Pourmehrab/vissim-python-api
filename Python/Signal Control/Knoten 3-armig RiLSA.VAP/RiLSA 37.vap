PROGRAM RiLSA_37; /* D:\Vision Data\VISSIM.Install\800\Examples\Examples Training\Signal Control\Knoten 3-armig RiLSA.VAP\RiLSA 37.vap */

VAP_FREQUENCY 1;

CONST 
            DK1 = 1,
            DK21 = 2,
            DK22 = 3,
            DK3 = 4,
            DK4 = 5,
            DK5 = 6,
            DT2 = 7,
            DT3 = 8,
            GZL = 3.0;

/* ARRAYS */ 

/* UNTERPROGRAMME */ 

SUBROUTINE WerteNachLDP;  /* RiLSA 37 LDP.vv */
D01S00Z001: Protokolliere_wert( 101, AnforderungPh2 ); Protokolliere_wert( 102, AnforderungK2 );
D01S00Z002: Protokolliere_wert( 103, AbbruchPh1 ); Protokolliere_wert( 104, AnforderungPh2Ph3 );
D01S00Z003: Protokolliere_wert( 105, AbbruchPh2 ); Protokolliere_wert( 106, AnforderungPh3 );
D01S00Z004: Protokolliere_wert( 107, AbbruchK3K4 )
D01PROG_ENDE: .
/*----------------------------------------------------------------------------*/

/* SIGNALPROGRAMM-ABHAENGIGE PARAMETER */ 
            IF( prog_aktiv = 1 ) AND ( prog_aktiv0vv <> 1 ) THEN 
              prog_aktiv0vv := 1;
              TUm := 60;
              T1 := 24;
              T2 := 29;
              T3 := 39;
              T4 := 45;
              T41 := T4-2;
              T5 := 57;
              T6 := 5;
              T61 := TUm+T6-16;
              T62 := TUm+T6-14;
            ELSE IF( prog_aktiv = 2 ) AND ( prog_aktiv0vv <> 2 ) THEN 
              prog_aktiv0vv := 2;
              TUm := 80;
              T1 := 72;
              T2 := 2;
              T3 := 15;
              T4 := 23;
              T41 := T4-2;
              T5 := 38;
              T6 := 48;
              T61 := T6-16;
              T62 := T6-14;
            END END;

/* AUSDRUECKE */ 
            A_DK21 := Anforderung( DK21 ) OR A_DK21;
            A_DK3 := Anforderung( DK3 ) OR A_DK3;
            A_DK4 := Anforderung( DK4 ) OR A_DK4;
            A_F2 := Bzt( DT2 ) > 0;
            A_F3 := Bzt( DT3 ) > 0;
            B_DK22 := Belegungszeit( DK22 ) >= 8.0;
            ZL_DK1 := Zeitlücke( DK1 ) >= GZL;
            ZL_DK21 := Zeitlücke( DK21 ) >= GZL;
            ZL_DK3_DK4 := (Zeitlücke( DK3 ) >= GZL) AND (Zeitlücke( DK4 ) >= GZL);
            ZL_DK5 := Zeitlücke( DK5 ) >= GZL;
            AnforderungPh2 := (B_DK22 OR A_DK21) AND ZL_DK5;
            AnforderungK2 := A_DK21;
            AbbruchPh1 := (A_DK3 OR A_DK4 OR A_F2 OR A_F3) AND ZL_DK5 AND ZL_DK1;
            AnforderungPh2Ph3 := A_DK3 OR A_DK4 OR A_F2 OR A_F3;
            AbbruchPh2 := (A_DK4 OR A_F2 OR A_F3) AND ZL_DK1 AND ZL_DK21 AND NOT B_DK22;
            AnforderungPh3 := A_DK4 OR A_F2 OR A_F3;
            AbbruchK3K4 := ZL_DK3_DK4;
            TgMin_Ph1 := (Tg( K1 ) >= Tgmin( K1 )) AND (Tg( K5 ) >= Tgmin( K5 )) AND (Tg( F1 ) >= Tgmin( F1 ));
            TgMin_Ph2 := (Tg( K1 ) >= Tgmin( K1 )) AND (Tg( K2 ) >= Tgmin( K2 )) AND (Tg(K3 ) >= Tgmin( K3 ));
            TgMin_Ph3 := (Tg( K4 ) >= Tgmin( K4 )) AND (Tg( F2 ) >= Tgmin( F2 )) AND (Tg(F3 ) >= Tgmin( F3 ));

/* HAUPTPROGRAMM */ 

S00Z001:    IF Umlaufsekunde >= TUm THEN
S01Z002:      sek := 1
            ELSE
S00Z002:      sek := Umlaufsekunde + 1
            END;
S00Z004:    Setze_umlaufsekunde( sek );
S00Z006:    IF Phase_läuft( 1 ) THEN
S01Z006:      IF NOT (NOT TgMin_Ph1) THEN
S01Z007:        IF Tzw( T1, T2, 2 ) THEN
S02Z007:          IF AnforderungPh2 THEN
S04Z007:            Pue( 1, 2 )
                  END
                ELSE
S01Z009:          IF T = T2 THEN
S02Z009:            IF AnforderungK2 THEN
S04Z009:              Pue( 1, 2 )
                    END
                  ELSE
S01Z011:            IF Tzw( T3, T41, 2 ) THEN
S02Z011:              IF AbbruchPh1 THEN
S04Z011:                Pue( 1, 3 )
                      END
                    ELSE
S01Z013:              IF Tzw( T41, T61, 3 ) THEN
S02Z013:                IF AnforderungPh2Ph3 THEN
S04Z013:                  Pue( 1, 3 )
                        END
                      END
                    END
                  END
                END
              END
            ELSE
S00Z015:      IF Phase_läuft( 2 ) THEN
S01Z015:        IF NOT (NOT TgMin_Ph2) THEN
S01Z016:          IF Tzw( T3, T4, 2 ) THEN
S02Z016:            IF AbbruchPh2 THEN
S03Z016:              A_DK21 := 0;
S04Z016:              Pue( 2, 3 )
                    END
                  ELSE
S01Z018:            IF Tzw( T4, T62, 3 ) THEN
S02Z018:              IF AnforderungPh3 THEN
S03Z018:                A_DK21 := 0;
S04Z018:                Pue( 2, 3 )
                      END
                    ELSE
S01Z020:              IF T >= T5 THEN
S03Z020:                A_DK21 := 0; A_DK3 := 0;
S04Z020:                Pue( 2, 1 )
                      END
                    END
                  END
                END
              ELSE
S00Z022:        IF Phase_läuft( 3 ) THEN
S01Z022:          IF NOT (NOT TgMin_Ph3) THEN
S01Z023:            IF Tzw( T5, T6, 2 ) THEN
S02Z023:              IF AbbruchK3K4 THEN
S03Z023:                A_DK3 := 0; A_DK4 := 0;
S04Z023:                Pue( 3, 1 )
                      END
                    ELSE
S01Z025:              IF T >= T6 THEN
S03Z025:                A_DK3 := 0; A_DK4 := 0;
S04Z025:                Pue( 3, 1 )
                      END
                    END
                  END
                END
              END
            END;
S00Z027:    GOSUB WerteNachLDP
PROG_ENDE:    .
/*----------------------------------------------------------------------------*/
